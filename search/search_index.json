{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "camply", "text": "<p><code>camply</code>, the campsite finder \u26fa\ufe0f, is a tool to help you book a campsite online. Finding reservations at sold out campgrounds can be tough. That's where camply comes in. It searches thousands of campgrounds across the USA world via the APIs of booking services like recreation.gov. It continuously checks for cancellations and availabilities to pop up - once a campsite becomes available, camply sends you a notification to book your spot!</p> <p> </p>"}, {"location": "#table-of-contents", "title": "Table of Contents", "text": "<ul> <li>Installation<ul> <li>PyPI</li> <li>Docker</li> </ul> </li> <li>Providers<ul> <li>RecreationDotGov</li> <li>Yellowstone</li> <li>GoingToCamp</li> <li>RecDotGov Tours + Tickets + Timed Entry</li> </ul> </li> <li>Command Line Usage<ul> <li>Simple Examples</li> <li>providers</li> <li>campsites</li> <li>recreation-areas</li> <li>campgrounds</li> <li>configure</li> <li>test-notifications</li> <li>list-campsites</li> <li>tui</li> <li>Examples<ul> <li>Searching for a Campsite</li> <li>Searching for a Campsite by Campground ID</li> <li>Searching for a Specific Campsite by ID</li> <li>Continuously Searching for A Campsite</li> <li>Searching Across Multiple Time Windows</li> <li>Continue Looking After The First Match Is Found</li> <li>Send a Push Notification</li> <li>Send a Text Message</li> <li>Send a Notification to Different Services</li> <li>Searching for Specific Weekdays</li> <li>Send a Notification Using Apprise-Compatible Services</li> <li>Look for Weekend Campsite Availabilities</li> <li>Look for Consecutive Nights at the Same Campsite</li> <li>Look for a Campsite Inside of Yellowstone</li> <li>Look for a Campsite from GoingToCamp</li> <li>Searching GoingToCamp Using Equipment</li> <li>Look for a Campsite Across Multiple Recreation areas</li> <li>Using a YAML Configuration file to search for campsites</li> <li>Searching for a Campsite That Fits Your Equipment</li> <li>Saving the Results of a Search</li> <li>Search for Recreation Areas by Query String</li> <li>Look for Specific Campgrounds Within a Recreation Area</li> <li>Look for Specific Campgrounds by Query String</li> <li>Searching for Tickets and Timed Entries<ul> <li>Tickets + Tours</li> <li>Timed Entry</li> <li>Using the Daily Providers</li> </ul> </li> <li>Search ReserveCalifornia</li> <li>Run camply as a CRON Job</li> </ul> </li> </ul> </li> <li>How to Run Camply<ul> <li>Run Modes<ul> <li>non-continuous</li> <li>continuous</li> <li>search-forever</li> <li>search-once</li> </ul> </li> <li>Running in Docker<ul> <li>Environment Variables</li> </ul> </li> </ul> </li> <li>Finding Recreation Areas IDs and Campground IDs To Search Without Using the Command Line</li> <li>Object-Oriented Usage (Python)<ul> <li>Search for a Recreation.gov Campsite</li> <li>Continuously Search for Recreation.gov Campsites</li> </ul> </li> <li>Dependencies</li> </ul> <p>Recreation data provided by Recreation.gov</p> <p></p> <p><p> </p></p>"}, {"location": "cli/", "title": "Command Line Interface", "text": ""}, {"location": "cli/#documentation", "title": "Documentation", "text": ""}, {"location": "cli/#camply", "title": "camply", "text": "<p>Welcome to camply, the campsite finder.</p> <p>Finding reservations at sold out campgrounds can be tough. That's where camply comes in. It searches the APIs of booking services like https://recreation.gov (which indexes thousands of campgrounds across the USA) to continuously check for cancellations and availabilities to pop up. Once a campsite becomes available, camply sends you a notification to book your spot!</p> <p>visit the camply documentation at https://juftin.com/camply</p> <p>Usage:</p> <pre><code>camply [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--debug</code> / <code>--no-debug</code> boolean Enable extra debugging output None <code>--provider</code> choice (<code>RecreationDotGov</code> | <code>Yellowstone</code> | <code>GoingToCamp</code> | <code>ReserveCalifornia</code> | <code>AlabamaStateParks</code> | <code>ArizonaStateParks</code> | <code>FloridaStateParks</code> | <code>MinnesotaStateParks</code> | <code>MissouriStateParks</code> | <code>OhioStateParks</code> | <code>VirginiaStateParks</code> | <code>NorthernTerritory</code> | <code>FairfaxCountyParks</code> | <code>MaricopaCountyParks</code> | <code>OregonMetro</code> | <code>RecreationDotGovTicket</code> | <code>RecreationDotGovTimedEntry</code> | <code>RecreationDotGovDailyTicket</code> | <code>RecreationDotGovDailyTimedEntry</code>) Camping Search Provider. Defaults to 'RecreationDotGov' None <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>campgrounds: </li> <li>campsites: </li> <li>configure: </li> <li>equipment-types: </li> <li>list-campsites: </li> <li>providers: </li> <li>recreation-areas: </li> <li>test-notifications: </li> <li>tui: Open Textual TUI.</li> </ul>"}, {"location": "cli/#camply-campgrounds", "title": "camply campgrounds", "text": "<p>Search for Campgrounds (inside of Recreation Areas) and list them</p> <p>Search for Campgrounds and their IDs. Campgrounds are facilities inside of Recreation Areas that contain campsites. Most 'campgrounds' are areas made up of multiple campsites, others are facilities like fire towers or cabins that might only contain a single 'campsite' to book.</p> <p>Usage:</p> <pre><code>camply campgrounds [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--search</code> text Search for Campgrounds or Recreation Areas by search string. None <code>--state</code> text Filter by US state code. None <code>--rec-area</code> text Add Recreation Areas (comprised of campgrounds) by ID. None <code>--campground</code> text Add individual Campgrounds by ID. None <code>--campsite</code> text Add individual Campsites by ID. None <code>--provider</code> choice (<code>RecreationDotGov</code> | <code>Yellowstone</code> | <code>GoingToCamp</code> | <code>ReserveCalifornia</code> | <code>AlabamaStateParks</code> | <code>ArizonaStateParks</code> | <code>FloridaStateParks</code> | <code>MinnesotaStateParks</code> | <code>MissouriStateParks</code> | <code>OhioStateParks</code> | <code>VirginiaStateParks</code> | <code>NorthernTerritory</code> | <code>FairfaxCountyParks</code> | <code>MaricopaCountyParks</code> | <code>OregonMetro</code> | <code>RecreationDotGovTicket</code> | <code>RecreationDotGovTimedEntry</code> | <code>RecreationDotGovDailyTicket</code> | <code>RecreationDotGovDailyTimedEntry</code>) Camping Search Provider. Defaults to 'RecreationDotGov' None <code>--debug</code> / <code>--no-debug</code> boolean Enable extra debugging output None <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "cli/#camply-campsites", "title": "camply campsites", "text": "<p>Find Available Campsites with Custom Search Criteria</p> <p>Search for a campsite within camply. Campsites are returned based on the search criteria provided. Campsites contain properties like booking date, site type (tent, RV, cabin, etc), capacity, price, and a link to make the booking. Required parameters include <code>--start-date</code>, <code>--end-date</code>, <code>--rec-area</code> / <code>--campground</code>. Constant searching functionality can be enabled with  <code>--continuous</code> and notifications can be enabled using <code>--notifications</code>.</p> <p>Usage:</p> <pre><code>camply campsites [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--rec-area</code> text Add Recreation Areas (comprised of campgrounds) by ID. None <code>--campground</code> text Add individual Campgrounds by ID. None <code>--campsite</code> text Add individual Campsites by ID. None <code>--start-date</code> text (YYYY-MM-DD) Start of Search window. You will be arriving this day. None <code>--end-date</code> text (YYYY-MM-DD) End of Search window. You will be checking out this day. None <code>--nights</code> integer Search for campsite stays with consecutive nights. Defaults to 1 which returns all campsites found. <code>1</code> <code>--weekends</code> boolean Only search for weekend bookings (Fri/Sat nights). <code>False</code> <code>--day</code> choice (<code>Monday</code> | <code>Tuesday</code> | <code>Wednesday</code> | <code>Thursday</code> | <code>Friday</code> | <code>Saturday</code> | <code>Sunday</code> | <code>MON</code> | <code>TUE</code> | <code>TUES</code> | <code>WED</code> | <code>THU</code> | <code>THUR</code> | <code>THURS</code> | <code>FRI</code> | <code>SAT</code> | <code>SUN</code>) Day(s) of the Week to search. None <code>--notifications</code> choice (<code>pushover</code> | <code>email</code> | <code>ntfy</code> | <code>apprise</code> | <code>pushbullet</code> | <code>slack</code> | <code>telegram</code> | <code>twilio</code> | <code>silent</code>) Enables continuous searching. Types of notifications to receive. Options available are <code>pushover</code>, <code>email</code>, <code>ntfy</code>, <code>apprise</code>, <code>pushbullet</code>, <code>slack</code>, <code>telegram</code>, <code>twilio</code>, <code>silent</code>. Defaults to <code>silent</code> - which just logs messages to console. <code>[]</code> <code>--continuous</code> boolean Continuously check for a campsite to become available, and quit once at least one campsite is found. <code>False</code> <code>--search-forever</code> text Enables continuous searching. This method continues to search after the first availability has been found. The one caveat is that it will never notify about the same identical campsite for the same booking date. <code>False</code> <code>--yaml-config</code>, <code>--yml-config</code> file Rather than provide arguments to the command line utility, instead pass a file path to a YAML configuration file. See the documentation for more information on how to structure your configuration file. None <code>--offline-search</code> boolean When set to True, the campsite search will both save the results of the campsites it's found, but also load those campsites before beginning a search for other campsites. <code>False</code> <code>--offline-search-path</code> file Enables offline search. This is the name of the file to be saved/loaded. Campsites can be saved as a serialized pickle file or a JSON file, depending on the file extension. When not specified, the filename will default to <code>camply_campsites.json</code> None <code>--search-once</code> boolean Enables continuous searching features - but doesn't actually search continuously. This option is only useful when you want to run camply periodically in a CRON job fashion but still receive notifications - it's strongly recommended you enable offline searching as well to save results between searches. <code>False</code> <code>--polling-interval</code> integer Enables continuous searching. How often to wait in between checks (in minutes). Defaults to 10, cannot be less than 5. None <code>--notify-first-try</code> text Enables continuous searching. Whether to send all non-silent notifications if more than 5 matching campsites are found on the first try. Defaults to False which only sends the first 5. <code>False</code> <code>--equipment</code> text Search for campsites compatible with your camping equipment. This argument accepts two options, the equipment name and its length If you don't want to filter based on length provide a length of 0. Accepted equipment names include <code>Tent</code>, <code>RV</code>. <code>Trailer</code>, <code>Vehicle</code> and are not case-sensitive. None <code>--equipment-id</code> text Search for campsites compatible with specific equipment categories. Going To Camp uses equipment category IDs for filtering campsites by equipment. Every recreation area has equipment categories unique to it. Use <code>camply equipment-types --provider GoingToCamp --rec-area &lt;rec area id&gt;</code> to get a listing of equipment for an area. None <code>--provider</code> choice (<code>RecreationDotGov</code> | <code>Yellowstone</code> | <code>GoingToCamp</code> | <code>ReserveCalifornia</code> | <code>AlabamaStateParks</code> | <code>ArizonaStateParks</code> | <code>FloridaStateParks</code> | <code>MinnesotaStateParks</code> | <code>MissouriStateParks</code> | <code>OhioStateParks</code> | <code>VirginiaStateParks</code> | <code>NorthernTerritory</code> | <code>FairfaxCountyParks</code> | <code>MaricopaCountyParks</code> | <code>OregonMetro</code> | <code>RecreationDotGovTicket</code> | <code>RecreationDotGovTimedEntry</code> | <code>RecreationDotGovDailyTicket</code> | <code>RecreationDotGovDailyTimedEntry</code>) Camping Search Provider. Defaults to 'RecreationDotGov' None <code>--debug</code> / <code>--no-debug</code> boolean Enable extra debugging output None <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "cli/#camply-configure", "title": "camply configure", "text": "<p>Set up camply configuration file with an interactive console</p> <p>In order to send notifications through camply you must set up some authorization values. Whether you need to set up pushover notifications (push notifications on your phone, your pushover account can be set up at https://pushover.net) or Email messages, everything can be done through the configure command. The end result is a file called .camply in your home folder.</p> <p>Usage:</p> <pre><code>camply configure [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--debug</code> / <code>--no-debug</code> boolean Enable extra debugging output None <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "cli/#camply-equipment-types", "title": "camply equipment-types", "text": "<p>Get a list of supported equipment</p> <p>This command returns supported equipment for the current provider/recreation area. Equipment are camping equipment that can be used at a campsite. Different providers and recreation areas have different types of equipment for which reservations can be made.</p> <p>Usage:</p> <pre><code>camply equipment-types [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--rec-area</code> text Add Recreation Areas (comprised of campgrounds) by ID. None <code>--provider</code> choice (<code>RecreationDotGov</code> | <code>Yellowstone</code> | <code>GoingToCamp</code> | <code>ReserveCalifornia</code> | <code>AlabamaStateParks</code> | <code>ArizonaStateParks</code> | <code>FloridaStateParks</code> | <code>MinnesotaStateParks</code> | <code>MissouriStateParks</code> | <code>OhioStateParks</code> | <code>VirginiaStateParks</code> | <code>NorthernTerritory</code> | <code>FairfaxCountyParks</code> | <code>MaricopaCountyParks</code> | <code>OregonMetro</code> | <code>RecreationDotGovTicket</code> | <code>RecreationDotGovTimedEntry</code> | <code>RecreationDotGovDailyTicket</code> | <code>RecreationDotGovDailyTimedEntry</code>) Camping Search Provider. Defaults to 'RecreationDotGov' None <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "cli/#camply-list-campsites", "title": "camply list-campsites", "text": "<p>List campsite IDs for a given campground or recreation area</p> <p>Usage:</p> <pre><code>camply list-campsites [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--rec-area</code> text Add Recreation Areas (comprised of campgrounds) by ID. None <code>--campground</code> text Add individual Campgrounds by ID. None <code>--provider</code> choice (<code>RecreationDotGov</code> | <code>Yellowstone</code> | <code>GoingToCamp</code> | <code>ReserveCalifornia</code> | <code>AlabamaStateParks</code> | <code>ArizonaStateParks</code> | <code>FloridaStateParks</code> | <code>MinnesotaStateParks</code> | <code>MissouriStateParks</code> | <code>OhioStateParks</code> | <code>VirginiaStateParks</code> | <code>NorthernTerritory</code> | <code>FairfaxCountyParks</code> | <code>MaricopaCountyParks</code> | <code>OregonMetro</code> | <code>RecreationDotGovTicket</code> | <code>RecreationDotGovTimedEntry</code> | <code>RecreationDotGovDailyTicket</code> | <code>RecreationDotGovDailyTimedEntry</code>) Camping Search Provider. Defaults to 'RecreationDotGov' None <code>--debug</code> / <code>--no-debug</code> boolean Enable extra debugging output None <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "cli/#camply-providers", "title": "camply providers", "text": "<p>List the different camply providers</p> <p>Usage:</p> <pre><code>camply providers [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--debug</code> / <code>--no-debug</code> boolean Enable extra debugging output None <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "cli/#camply-recreation-areas", "title": "camply recreation-areas", "text": "<p>Search for Recreation Areas and list them</p> <p>Search for Recreation Areas and their IDs. Recreation Areas are places like National Parks and National Forests that can contain one or many campgrounds.</p> <p>Usage:</p> <pre><code>camply recreation-areas [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--search</code> text Search for Campgrounds or Recreation Areas by search string. None <code>--state</code> text Filter by US state code. None <code>--debug</code> / <code>--no-debug</code> boolean Enable extra debugging output None <code>--provider</code> choice (<code>RecreationDotGov</code> | <code>Yellowstone</code> | <code>GoingToCamp</code> | <code>ReserveCalifornia</code> | <code>AlabamaStateParks</code> | <code>ArizonaStateParks</code> | <code>FloridaStateParks</code> | <code>MinnesotaStateParks</code> | <code>MissouriStateParks</code> | <code>OhioStateParks</code> | <code>VirginiaStateParks</code> | <code>NorthernTerritory</code> | <code>FairfaxCountyParks</code> | <code>MaricopaCountyParks</code> | <code>OregonMetro</code> | <code>RecreationDotGovTicket</code> | <code>RecreationDotGovTimedEntry</code> | <code>RecreationDotGovDailyTicket</code> | <code>RecreationDotGovDailyTimedEntry</code>) Camping Search Provider. Defaults to 'RecreationDotGov' None <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "cli/#camply-test-notifications", "title": "camply test-notifications", "text": "<p>Test your notification provider setup</p> <p>Usage:</p> <pre><code>camply test-notifications [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--notifications</code> choice (<code>pushover</code> | <code>email</code> | <code>ntfy</code> | <code>apprise</code> | <code>pushbullet</code> | <code>slack</code> | <code>telegram</code> | <code>twilio</code> | <code>silent</code>) Types of notifications to receive. Options available are <code>pushover</code>, <code>email</code>, <code>ntfy</code>, <code>apprise</code>, <code>pushbullet</code>, <code>slack</code>, <code>telegram</code>, <code>twilio</code>, <code>silent</code>. Defaults to <code>silent</code> - which just logs messages to console. _required <code>--debug</code> / <code>--no-debug</code> boolean Enable extra debugging output None <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "cli/#camply-tui", "title": "camply tui", "text": "<p>Open Textual TUI.</p> <p>Usage:</p> <pre><code>camply tui [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"}, {"location": "command_line_usage/", "title": "Command Line Usage", "text": "<p>When installed, <code>camply</code>'s command line utility can be invoked with the command, <code>camply</code>. The CLI tool accepts one of six sub-arguments: <code>campsites</code>, <code>recreation-areas</code>, <code>campgrounds</code>, <code>providers</code>, <code>equipment-types</code>, and <code>configure</code>.</p> <p>Important</p> <p>The multi-line commands in this documentation correspond to running <code>camply</code> on a MacOS or Linux Shell. If you are a Windows user take note that multi-line commands on Windows Shells use the <code>^</code> character instead of <code>\\</code> to escape new lines.</p> <pre><code>\u276f camply --help\n Usage: camply [OPTIONS] COMMAND [ARGS]...\n Welcome to camply, the campsite finder.\n Finding reservations at sold out campgrounds can be tough. That's where camply comes in. It searches the\n APIs of booking services like https://recreation.gov (which indexes thousands of campgrounds across the\n USA) to continuously check for cancellations and availabilities to pop up. Once a campsite becomes\n available, camply sends you a notification to book your spot!\n visit the camply documentation at https://juftin.com/camply\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                        \u2502\n\u2502  --debug/--no-debug             Enable extra debugging output                                          \u2502\n\u2502  --provider              TEXT   Camping Search Provider. Defaults to 'RecreationDotGov'                \u2502\n\u2502  --version                      Show the version and exit.                                             \u2502\n\u2502  --help                         Show this message and exit.                                            \u2502\n\u2502                                                                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                                                        \u2502\n\u2502  campgrounds              Search for Campgrounds (inside of Recreation Areas) and list them            \u2502\n\u2502  campsites                Find Available Campsites with Custom Search Criteria                         \u2502\n\u2502  configure                Set up camply configuration file with an interactive console                 \u2502\n\u2502  equipment-types          Get a list of supported equipment                                            \u2502\n\u2502  list-campsites           List campsite IDs for a given campground or recreation area                  \u2502\n\u2502  providers                List the different camply providers                                          \u2502\n\u2502  recreation-areas         Search for Recreation Areas and list them                                    \u2502\n\u2502  test-notifications       Test your notification provider setup                                        \u2502\n\u2502  tui                      Open Textual TUI.                                                            \u2502\n\u2502                                                                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"}, {"location": "command_line_usage/#simple-examples", "title": "Simple Examples", "text": "<p>Search for a specific recreation area (recreation areas contain campgrounds):</p> <pre><code>camply recreation-areas --search \"Glacier National Park\"\n</code></pre> <p>Search for campgrounds (campgrounds contain campsites):</p> <pre><code>camply campgrounds --search \"Fire Lookout Towers\" --state CA\n</code></pre> <p>Search for available campsites, get an notification whenever one becomes available, and continue searching after the first one is found:</p> <pre><code>camply campsites \\\n    --rec-area 2725 \\\n    --start-date 2023-07-10 \\\n    --end-date 2023-07-18 \\\n    --notifications email \\\n    --search-forever\n</code></pre>"}, {"location": "command_line_usage/#providers", "title": "providers", "text": "<p>List the various providers that camply works with.</p> <pre><code>camply providers\n</code></pre> <p>Note</p> <p>If no provider is specified, camply will use the default provider, <code>RecreationDotGov</code>, which searches for recreation areas, campgrounds, and campsites listed on https://recreation.gov</p>"}, {"location": "command_line_usage/#campsites", "title": "campsites", "text": "<p>Search for a campsite within camply. Campsites are returned based on the search criteria provided. Campsites contain properties like booking date, site type (tent, RV, cabin, etc), capacity, price, and a link to make the booking. Required parameters include <code>--start-date</code>, <code>--end-date</code>, <code>--rec-area</code> / <code>--campground</code> / <code>--campsite</code>. Constant searching functionality can be enabled with <code>--continuous</code> and notifications can be enabled using <code>--notifications</code> (see the Send a Push Notification section for more information).</p>"}, {"location": "command_line_usage/#arguments", "title": "Arguments", "text": "<ul> <li><code>--rec-area</code>: <code>RECREATION_AREA_ID</code><ul> <li>Add Recreation Areas (comprised of campgrounds) by ID.     **example</li> </ul> </li> <li><code>--campground</code>: <code>CAMPGROUND_ID</code><ul> <li>Add individual Campgrounds by ID.     **example</li> </ul> </li> <li><code>--campsite</code>: <code>CAMPSITE_ID</code><ul> <li>Add individual Campsites by ID.     **example</li> </ul> </li> <li><code>--start-date</code>: <code>START_DATE</code><ul> <li><code>YYYY-MM-DD</code>: Start of Search window. You will be arriving this day.     **example</li> </ul> </li> <li><code>--end-date</code>: <code>END_DATE</code><ul> <li><code>YYYY-MM-DD</code>: End of Search window. You will be checking out this day..     **example</li> </ul> </li> <li><code>--day</code><ul> <li>Day(s) of the Week to search.     **example</li> </ul> </li> <li><code>--weekends</code><ul> <li>Only search for weekend bookings (Fri/Sat nights).     **example</li> </ul> </li> <li><code>--nights</code><ul> <li>Search for campsite stays with consecutive nights. Defaults to 1 which returns all campsites     found.     **example</li> </ul> </li> <li><code>--provider</code>: <code>PROVIDER</code><ul> <li>Camping Search Provider. Defaults to 'RecreationDotGov', not case-sensitive. Options include:     RecreationDotGov, Yellowstone,     GoingToCamp, RecreationDotGovDailyTicket,     RecreationDotGovDailyTimedEntry, RecreationDotGovTicket,     RecreationDotGovTimedEntry.     **example</li> </ul> </li> <li><code>--continuous</code><ul> <li>Continuously check for a campsite to become available, and quit once at least one campsite is     found.     **example</li> </ul> </li> <li><code>--search-forever</code><ul> <li>Enables continuous searching. This method continues to search after the first availability     has been found. The one caveat is that it will never notify about the same identical campsite     for the same booking date.     **example</li> </ul> </li> <li><code>--notifications</code>: <code>NOTIFICATIONS</code><ul> <li>Enables continuous searching. Types of notifications to receive. Options available     are <code>pushover</code>, <code>email</code>, <code>ntfy</code>, <code>apprise</code>, <code>pushbullet</code>, <code>slack</code>, <code>telegram</code>, <code>twilio</code>, <code>silent</code>.     Defaults to <code>silent</code> - which just logs messages to console.     **example</li> </ul> </li> <li><code>--equipment</code><ul> <li>Search for campsites compatible with your camping equipment. This argument accepts two     options, the equipment name and its length If you don't want to filter based on length provide     a length of 0. Accepted equipment names include <code>Tent</code>, <code>RV</code>. <code>Trailer</code>, <code>Vehicle</code> and are     not case-sensitive.     **example</li> </ul> </li> <li><code>--equipment-id</code><ul> <li>Search for campsites campaitble with specific equipment categories. Going To Camp     uses equipment category IDs for filtering campsites by equipment. Every recreation     area has equipment categories unique to it.     **example</li> </ul> </li> <li><code>--notify-first-try</code><ul> <li>Enables continuous searching. Whether to send all non-silent notifications if more than 5     matching campsites are found on the first try. Defaults to false which only sends the first5.     **example</li> </ul> </li> <li><code>--polling-interval</code>: <code>POLLING_INTERVAL</code><ul> <li>Enables continuous searching. How often to wait in between checks (in minutes). Defaults to     10, cannot be less than 5.     **example</li> </ul> </li> <li><code>--yaml-config</code><ul> <li>Rather than provide arguments to the command line utility, instead pass a file path to a YAML     configuration file. See the documentation for more information on how to structure your     configuration file.     **example</li> </ul> </li> <li><code>--offline-search</code><ul> <li>When set to True, the campsite search will both save the results of the campsites it's     found, but also load those campsites before beginning a search for other campsites.     **example</li> </ul> </li> <li><code>--offline-search-path</code><ul> <li>Enables offline search. This is the name of the file to be saved/loaded. Campsites can be saved as     a serialized pickle file or a JSON file, depending on the file extension. When not specified,     the filename will default to <code>camply_campsites.json</code>.     **example</li> </ul> </li> <li><code>--search-once</code><ul> <li>Enables continuous searching features - but doesn't actually search continuously. This option     is only useful when you want to run camply periodically in a CRON job fashion but still     receive notifications - it's strongly recommended you enable offline searching as     well to save results between searches.     **example</li> </ul> </li> </ul> <pre><code>camply campsites \\\n    --rec-area 2725 \\\n    --start-date 2023-07-10 \\\n    --end-date 2023-07-18\n</code></pre>"}, {"location": "command_line_usage/#recreation-areas", "title": "recreation-areas", "text": "<p>Search for Recreation Areas and their IDs. Recreation Areas are places like National Parks and National Forests that can contain one or many campgrounds.</p>"}, {"location": "command_line_usage/#arguments_1", "title": "Arguments", "text": "<ul> <li><code>--search</code> <code>SEARCH</code><ul> <li>Search for Campgrounds or Recreation Areas by search string.</li> </ul> </li> <li><code>--state</code> <code>STATE</code><ul> <li>Filter by US state code.</li> </ul> </li> </ul> <pre><code>camply recreation-areas --search \"Yosemite National Park\"\n</code></pre> <p>**see the examples for more information</p>"}, {"location": "command_line_usage/#campgrounds", "title": "campgrounds", "text": "<p>Search for Campgrounds and their IDs. Campgrounds are facilities inside of Recreation Areas that contain campsites. Most 'campgrounds' are areas made up of multiple campsites, others are facilities like fire towers or cabins that might only contain a single 'campsite' to book.</p>"}, {"location": "command_line_usage/#arguments_2", "title": "Arguments", "text": "<ul> <li><code>--search</code> <code>SEARCH</code><ul> <li>Search for Campgrounds or Recreation Areas by search string.</li> </ul> </li> <li><code>--state</code> <code>STATE</code><ul> <li>Filter by US state code.</li> </ul> </li> <li><code>--rec-area</code>: <code>RECREATION_AREA_ID</code><ul> <li>Add Recreation Areas (comprised of campgrounds) by ID.</li> </ul> </li> <li><code>--campground</code>: <code>CAMPGROUND_ID</code><ul> <li>Add individual Campgrounds by ID.</li> </ul> </li> </ul> <pre><code>camply campgrounds --search \"Fire Tower Lookout\" --state CA\n</code></pre> <p>**see the examples for more information</p>"}, {"location": "command_line_usage/#configure", "title": "configure", "text": "<p>Set up <code>camply</code> configuration file with an interactive console</p> <p>In order to send notifications through <code>camply</code> you must set up some authorization values. Whether you need to set up Pushover notifications , PushBullet, Telegram, or Email messages, everything can be done through the <code>configure</code> command. The end result is a file called <code>.camply</code> in your home folder. See the Running in Docker section to see how you can use environment variables instead of a config file.</p> <pre><code>camply configure\n</code></pre>"}, {"location": "command_line_usage/#test-notifications", "title": "test-notifications", "text": "<p>Test your notification provider setup.</p> <p>If you want to send yourself a test notification via camply, the <code>test-notifiactions</code> command is for you. See the Send a Push Notification section for more details on how to set up the notification provider of your choice.</p> <pre><code>camply test-notifications --notifications email\n</code></pre>"}, {"location": "command_line_usage/#list-campsites", "title": "list-campsites", "text": "<p>When searching for a specific campsite by ID, it can be useful to list the campsites that were found. This command will list the campsites that were found given specific camground / recreation area ID.</p> <pre><code>camply list-campsites --campground 598 --provider ReserveCalifornia\n</code></pre> <p>That search above would tell you that <code>Premium Campsite #88</code> has ID #43473. Using that information you can then search for that specific campsite by ID:</p> <pre><code>camply campsites \\\n  --provider ReserveCalifornia \\\n  --campground 598 \\\n  --campsite 43473 \\\n  --start-date 2023-07-13 \\\n  --end-date 2023-07-14\n</code></pre> <p>Note</p> <p>Some providers require that you pass a campsite ID and and a campground ID, while others only require a campsite ID.</p>"}, {"location": "command_line_usage/#tui", "title": "tui", "text": "<p>Camply has an optional TUI interface thanks to textual and trogon. A TUI is a text-based user interface that allows you to interact with camply in a more visual way, it's a visual application that runs in your terminal. The TUI config is a great way to set up your camp search with your mouse and keyboard, and then run camply like you normally would.</p> <p>Note</p> <p>Camply's TUI command requires that the <code>tui</code> extra is installed. To install camply with the TUI extra, run <code>pipx install \"camply[tui]\"</code>.</p> <pre><code>camply tui\n</code></pre> <p></p>"}, {"location": "command_line_usage/#examples", "title": "Examples", "text": "<p>Read through the examples below to get a better understanding of <code>camply</code>, its features, and the functionality of the different arguments provided to the CLI.</p>"}, {"location": "command_line_usage/#searching-for-a-campsite", "title": "Searching for a Campsite", "text": "<p>The below search looks for campsites inside of Recreation Area ID #2725 (Glacier National Park) between 2023-07-10 and 2023-07-17. The search will be performed once and any results will be logged to the console. camply searches for campsites inside of search windows in increments of one night. <code>--start-date</code> and <code>--end-date</code> define the bounds of the search window, you will be leaving the day after <code>--end-date</code>.</p> <pre><code>camply campsites \\\n    --rec-area 2725 \\\n    --start-date 2023-07-10 \\\n    --end-date 2023-07-18\n</code></pre>"}, {"location": "command_line_usage/#searching-for-a-campsite-by-campground-id", "title": "Searching for a Campsite by Campground ID", "text": "<p>The below search looks for across three campgrounds (all inside Glacier National Park) between 2023-07-10 and 2023-07-17. Multiple Campgrounds (and Recreation Areas too) can be found by supplying the arguments more than once.</p> <pre><code>camply campsites \\\n    --campground 232493 \\\n    --campground 251869 \\\n    --campground 232492 \\\n    --start-date 2023-07-10 \\\n    --end-date 2023-07-18\n</code></pre>"}, {"location": "command_line_usage/#searching-for-a-specific-campsite-by-id", "title": "Searching for a Specific Campsite by ID", "text": "<p>Sometimes you have a favorite campsite inside your favorite campground. To search for just a specific campsite (and not just all campsites within a campground) you can give its ID to <code>camply</code> with the <code>--campsite</code> argument. For example, site <code>R035</code> in Many Glacier Campground, MT is close to a trailhead. Its URL is https://www.recreation.gov/camping/campsites/98363 , here we can see that it's ID is <code>98363</code>. You can search for one or many campsites by ID by supplying the <code>--campsite</code> argument. You can provide the <code>--campsite</code> argument once or multiple times to search for different campsites.</p> <p>Note</p> <p>For RecreationDotGov, <code>--campsite</code> arguments override any <code>--rec-area</code> or <code>--campground</code> options provided. And <code>--campground</code> will override the <code>--rec-area</code> option.</p> <p>However other providers may need you to provide both a <code>--campground</code> and <code>--campsite</code> ID. See the list-campsites example for more information.</p> <pre><code>camply campsites \\\n    --campsite 98363 \\\n    --start-date 2023-07-10 \\\n    --end-date 2023-07-18\n</code></pre>"}, {"location": "command_line_usage/#continuously-searching-for-a-campsite", "title": "Continuously Searching for A Campsite", "text": "<p>Most of the time you want to look for campgrounds until an eventual match is found. The below snippet will search for matching campsites until it finds a match. It also sends a notification via <code>pushover</code> once matches are found. Alternate notification methods are listed in the Send a Push Notification example.</p> <p>Note</p> <p>The use of <code>--continuous</code> in the below example isn't actually necessary. Continuous searching is enabled when any of the following options are provided: <code>--continuous</code>, <code>--notifications</code>, <code>--search-forever</code>, <code>--polling-interval</code>, <code>--notify-first-try</code>.</p> <pre><code>camply campsites \\\n    --rec-area 2725 \\\n    --start-date 2023-07-12 \\\n    --end-date 2023-07-13 \\\n    --continuous \\\n    --notifications pushover \\\n    --notify-first-try\n</code></pre> <p>Warning</p> <p>When <code>camply</code> is told to running continuously with non-silent notifications set up and it finds more than 5 matching campsites on the first try, it will only send notifications for the first 5 campsites. This is to prevent thousands of campsites flooding your notifications. It's always encouraged to perform an initial online search before setting up a <code>camply</code> search. To bypass this behavior and send all notifications, pass the <code>--notify-first-try</code> argument.</p>"}, {"location": "command_line_usage/#searching-across-multiple-time-windows", "title": "Searching Across Multiple Time Windows", "text": "<p>There might be an occasion where you're looking to search for a campsite across multiple date ranges, i.e. any Monday in July. <code>camply</code> supports this quite nicely by passing multiple <code>--start-date</code> and <code>--end-date</code> options.</p> <p>Note</p> <p>The important rule about multiple <code>--start-date</code> and <code>--end-date</code> options is that ordering matters. If you provide multiple start dates and multiple end dates the first end date will correspond to the first start date, and so on and so forth.</p> <pre><code>camply campsites \\\n    --rec-area 2725 \\\n    --start-date 2023-07-12 \\\n    --end-date 2023-07-13 \\\n    --start-date 2023-07-19 \\\n    --end-date 2023-07-20 \\\n    --start-date 2023-07-26 \\\n    --end-date 2023-07-27\n</code></pre>"}, {"location": "command_line_usage/#continue-looking-after-the-first-match-is-found", "title": "Continue Looking After The First Match Is Found", "text": "<p>Sometimes you want to search for all possible matches up until your arrival date. No problem. Add the <code>--search-forever</code> and <code>camply</code> won't stop sending notifications after the first match is found.</p> <p>Note</p> <p><code>camply</code> will save and store all previous notifications when <code>--search-forever</code> is enabled, so it won't notify you about the exact same campsite availability twice. This can be problematic when certain campsites become available more than once.</p> <pre><code>camply campsites \\\n    --rec-area 2725 \\\n    --start-date 2023-07-01 \\\n    --end-date 2023-08-01 \\\n    --notifications pushover \\\n    --search-forever\n</code></pre>"}, {"location": "command_line_usage/#send-a-push-notification", "title": "Send a Push Notification", "text": "<p>camply supports notifications via a number of services:</p> <ul> <li>Pushover</li> <li>Email</li> <li>Ntfy</li> <li>Apprise</li> <li>Pushbullet</li> <li>Slack</li> <li>Telegram</li> <li>Twilio (SMS)</li> <li>Silent</li> </ul> <pre><code>camply campsites \\\n    --rec-area 2991 \\\n    --start-date 2023-09-10 \\\n    --end-date 2023-09-21 \\\n    --notifications pushover\n</code></pre> <p>Like all providers, <code>Pushover</code> requires that you share credentials/authentication - for <code>Pushover</code> this involves sharing your \"Pushover User Key\" with camply through a configuration file (via the <code>camply configure</code> command) or though environment variables (<code>PUSHOVER_PUSH_USER</code>). See the Environment Variables section for a list of relevant environment variables per notification provider.</p> <p>Info</p> <p>When searching continuously <code>camply</code> uses the <code>silent</code> notification provider unless you expictly specify another notification provider to use. The <code>silent</code> notification provider simply prints logs to your console when matching campsites are found.</p> <p>Note</p> <p>I personally use Pushover notifications - it's built for push notifications, easy to set up, and includes a 30-day trial and a one-time fee of $5 after that to unlock lifetime programmatic push notifications. There are other notification providers like <code>Ntfy</code>, <code>Slack</code> and <code>Email</code> that are free to use if that's more your style.</p>"}, {"location": "command_line_usage/#send-a-text-message", "title": "Send a Text Message", "text": "<p>If you want to sign up for a Twilio account, camply also supports sending text messages via SMS. You can set up your Twilio configuration via <code>camply configure</code>. You will need to set the following config values for Twilio: <code>TWILIO_ACCOUNT_SID</code>, <code>TWILIO_AUTH_TOKEN</code>, <code>TWILIO_SOURCE_NUMBER</code>, <code>TWILIO_DEST_NUMBERS</code>.</p> <p>Sending text messages via Twilio also requires the <code>twilio</code> extras:</p> <pre><code>pip install camply[twilio]\n</code></pre> <pre><code>camply campsites \\\n    --rec-area 2991 \\\n    --start-date 2023-09-10 \\\n    --end-date 2023-09-21 \\\n    --notifications twilio\n</code></pre>"}, {"location": "command_line_usage/#send-a-notification-to-different-services", "title": "Send a Notification to Different Services", "text": "<p>camply supports notifications from different providers. To send notifications to multiple providers you can pass the --notifications parameter multiple times. YAML config entries also accept an array as well.</p> <pre><code>camply campsites \\\n    --rec-area 2991 \\\n    --start-date 2023-09-10 \\\n    --end-date 2023-09-21 \\\n    --notifications email \\\n    --notifications pushover\n</code></pre>"}, {"location": "command_line_usage/#send-a-notification-using-apprise-compatible-services", "title": "Send a Notification Using Apprise-Compatible Services", "text": "<p>In addition to the built-in notification providers, you can also send notifications using one of the many popular services supported by Apprise. You'll need to set up a supported notification URL using the <code>APPRISE_URL</code> config value; Refer to the Apprise documentation to learn how to format a URL to fit your needs.</p> <p>Using Apprise notifications requires the <code>apprise</code> extras:</p> <pre><code>pip install camply[apprise]\n</code></pre>"}, {"location": "command_line_usage/#searching-for-specific-weekdays", "title": "Searching for Specific Weekdays", "text": "<p>The below search spans across a three-month time window, but it only looks for campsites that are available on a Tuesday or Wednesday night.</p> <p>Note</p> <p>You can use the day's full spelling or an abbreviation - and neither is case sensitive.</p> <pre><code>camply campsites \\\n    --campground 232446 \\\n    --start-date 2023-05-01 \\\n    --end-date 2023-08-01 \\\n    --day Tuesday \\\n    --day Wednesday\n</code></pre>"}, {"location": "command_line_usage/#look-for-weekend-campsite-availabilities", "title": "Look for Weekend Campsite Availabilities", "text": "<p>This below search looks across larger periods of time, but only if a campground is available to book on a Friday or Saturday night (<code>--weekends</code>). It also uses the <code>--polling-interval</code> argument which checks every 5 minutes instead of the default 10 minutes.</p> <pre><code>camply campsites \\\n    --rec-area 2991 \\\n    --start-date 2023-05-01 \\\n    --end-date 2023-08-01 \\\n    --weekends \\\n    --notifications email \\\n    --polling-interval 5\n</code></pre> <p>Note</p> <p>Using the <code>--weekends</code> option is the same as specifying <code>--day Friday</code> + <code>--day Saturday</code>.</p>"}, {"location": "command_line_usage/#look-for-consecutive-nights-at-the-same-campsite", "title": "Look for Consecutive Nights at the Same Campsite", "text": "<p>A lot of times you need to search for consecutive nights at the same campsite. By default, any and all campsites with a single nights booking are returned by camply. To search for campsites with consecutive night stays, pass the <code>--nights</code> argument.</p> <p>Note</p> <p>The <code>--nights</code> argument handles issues with improper search parameters. For example, if you set the <code>--weekends</code> parameter the maximum number of consecutive nights possible is 2. If you supply more than this your <code>--nights</code> parameter will be overwritten to 2.</p> <pre><code>camply campsites \\\n    --rec-area 2991 \\\n    --start-date 2023-05-01 \\\n    --end-date 2023-08-01 \\\n    --nights 4\n</code></pre>"}, {"location": "command_line_usage/#look-for-a-campsite-inside-of-yellowstone", "title": "Look for a Campsite Inside of Yellowstone", "text": "<p>Yellowstone doesn't use https://recreation.gov to manage its campgrounds, instead it uses its own proprietary system. In order to search the Yellowstone API for campsites, make sure to pass the <code>--provider \"yellowstone\"</code> argument. This flag disables <code>--rec-area</code> argument.</p> <p>To learn more about using <code>camply</code> to find campsites at Yellowstone, check out this discussion.</p> <pre><code>camply campsites \\\n    --provider yellowstone \\\n    --start-date 2023-07-09 \\\n    --end-date 2023-07-17 \\\n    --continuous\n</code></pre>"}, {"location": "command_line_usage/#look-for-a-campsite-from-goingtocamp", "title": "Look for a Campsite from GoingToCamp", "text": "<p>Note</p> <p>The GoingToCamp provider supports lots of different park systems, including Washington State Parks, Canada National Parks, and more. See the GoingToCamp provider documentation for more information.</p> <p>The <code>GoingToCamp</code> provider requires that you specify both a Recreation Area and a Campground in your search. First you'll need to find your Recreation Area ID:</p> <pre><code>camply recreation-areas --provider goingtocamp\n</code></pre> <p>For this example we'll search Washington State Parks which corresponds to Recreation Area ID #4. Next we'll list the Campgrounds within the Recreation Area:</p> <pre><code>camply campgrounds --provider goingtocamp --rec-area 4\n</code></pre> <p>The above command will list all of the campgrounds within our Recreation Area. For the next example we'll search for an availability at Bay Bridge State Park, which is in our Recreation Area and corresponds to Campground ID #-2147483645 (GoingToCamp regularly uses negative ID numbers).</p> <pre><code>camply campsites \\\n  --provider goingtocamp \\\n  --rec-area 4 \\\n  --campground -2147483645 \\\n  --start-date 2023-09-01 \\\n  --end-date 2023-09-02\n</code></pre>"}, {"location": "command_line_usage/#searching-goingtocamp-using-equipment", "title": "Searching GoingToCamp Using Equipment", "text": "<p>In the previous GoingToCamp example we were searching Recreation Area ID #4 and Campground ID #-2147483645. GoingToCamp also allows us to search for campsites using equipment filters. In order to find the corresponding equipment IDs, you'll use the <code>equipment-types</code> command and pass in the Recreation Area ID:</p> <pre><code>camply equipment-types --provider goingtocamp --rec-area 4\n</code></pre> <p>The previous command will list all of the Equipment IDs for your Recreation Area. For our example we will use Equipment ID #-32763 which corresponds to an <code>RV/Trailer up to 25'</code>. Next we can use that Equipment ID in our search:</p> <pre><code>camply campsites \\\n  --provider goingtocamp \\\n  --rec-area 4 \\\n  --campground -2147483645 \\\n  --start-date 2023-09-01 \\\n  --end-date 2023-09-02 \\\n  --equipment-id -32763\n</code></pre>"}, {"location": "command_line_usage/#look-for-a-campsite-across-multiple-recreation-areas", "title": "Look for a Campsite Across Multiple Recreation areas", "text": "<p>You don't have to confine your search to a single Recreation or Campground ID. Adding multiple arguments to the command line will search across multiple IDs. Keep in mind that any <code>--campground</code> arguments will overwrite all <code>--rec-area</code> arguments.</p> <pre><code>camply campsites \\\n    --rec-area 2991 \\\n    --rec-area 1074 \\\n    --start-date 2023-07-09 \\\n    --end-date 2023-07-17 \\\n    --nights 5\n</code></pre>"}, {"location": "command_line_usage/#using-a-yaml-configuration-file-to-search-for-campsites", "title": "Using a YAML Configuration file to search for campsites", "text": "<p>Sometimes, using a YAML configuration file is easier to manage all of your search options. See the below YAML example file and corresponding camply command:</p> <pre><code>provider: RecreationDotGov # RecreationDotGov IF NOT PROVIDED\nrecreation_area: # (LIST OR SINGLE ENTRY)\n- 2991 # Yosemite National Park, CA (All Campgrounds)\n- 1074 # Sierra National Forest, CA (All Campgrounds)\ncampgrounds: # ENTIRE FIELD CAN BE OMITTED IF NOT USED - (LIST OR SINGLE ENTRY)\ncampsites: # OVERRIDES CAMPGROUNDS / RECREATION AREA - (LIST OR SINGLE ENTRY)\nstart_date: 2023-09-12 # YYYY-MM-DD - (LIST OR SINGLE ENTRY)\nend_date: 2023-09-13 # YYYY-MM-DD - (LIST OR SINGLE ENTRY)\ndays: # Array of day names - DEFAULTS TO `null`\nweekends: false # FALSE BY DEFAULT\nnights: 1 # 1 BY DEFAULT\ncontinuous: true # DEFAULTS TO TRUE\npolling_interval: 5 # DEFAULTS TO 10 , CAN'T BE LESS THAN 5\nnotifications: email # (silent, email, pushover, pushbullet, and telegram), DEFAULTS TO `silent`\nsearch_forever: true # FALSE BY DEFAULT\nsearch_once: false # FALSE BY DEFAULT\nnotify_first_try: false # FALSE BY DEFAULT\nequipment: # Array of Equipment Search Lists - DEFAULTS TO `null`\noffline_search: false # FALSE BY DEFAULT\noffline_search_path: camply_campsites.json # Defaults to `camply_campsites.json`\n</code></pre> <pre><code>camply campsites --yaml-config example_search.yaml\n</code></pre> <p>Note</p> <p>A JSON Schema for the YAML configuration file can be found at docs/yaml_search.json</p>"}, {"location": "command_line_usage/#searching-for-a-campsite-that-fits-your-equipment", "title": "Searching for a Campsite That Fits Your Equipment", "text": "<p>Camply can help you filter campsites to fit your specific equipment, like a Trailer or an RV. Most likely, you care that the campsite fits the length of your RV so you can specify that as well. To search for specific equipment and its length provide the <code>--equipment</code> option with two arguments, the equipment name and the equipment length. If you don't want to filter based on length provide a length of zero. If you provide multiple <code>--equipment</code> options, sites matching any of your search equipment will be returned.</p> <p>Current supported equipment names are <code>Vehicle</code>, <code>Tent</code>, <code>RV</code>, and <code>Trailer</code>. Be careful when filtering on <code>Tents</code> and <code>Vehicle</code> length, sometimes Recreation.gov doesn't provide that information, it is safer to set length to 0.</p> <pre><code>camply campsites \\\n    --rec-area 2991 \\\n    --start-date 2023-07-09 \\\n    --end-date 2023-07-17 \\\n    --nights 5 \\\n    --equipment RV 25\n</code></pre> <p>Here's what the above search would look like on a YAML Config:</p> <pre><code>recreation_area:\n- 2991\nstart_date: 2023-07-09\nend_date: 2023-07-17\nnights: 5\nequipment:\n- [RV, 25]\n</code></pre> <p>Finally, here's a search that accommodates trailers of all lengths:</p> <pre><code>camply campsites \\\n    --rec-area 2991 \\\n    --start-date 2023-07-09 \\\n    --end-date 2023-07-17 \\\n    --nights 5 \\\n    --equipment Trailer 0\n</code></pre>"}, {"location": "command_line_usage/#saving-the-results-of-a-search", "title": "Saving the Results of a Search", "text": "<p>In some cases, you might want to save all the campsites found during one search and load them into a new search, so you don't receive duplicate notifications. This can be achieved by passing the <code>--offline-search</code> flag. By default, camply will save the results in a file called <code>camply_campsites.json</code>.</p> <p>Alternatively, you can also path the <code>--offline-search-path</code> flag to specify a certain file path to save the results as. When a file path with a <code>.json</code> extension is passed camply will export the results as a JSON file. When the <code>.pkl</code> or <code>.pickle</code> extension is used, camply will use a serialized Pickle file.</p> <pre><code>camply \\\n  campsites \\\n  --campground 232064 \\\n  --start-date 2023-09-01 \\\n  --end-date 2023-10-01 \\\n  --continuous \\\n  --offline-search\n</code></pre> <pre><code>camply \\\n  campsites \\\n  --campground 232064 \\\n  --start-date 2023-09-01 \\\n  --end-date 2023-10-01 \\\n  --continuous \\\n  --offline-search-path campsites.pkl\n</code></pre>"}, {"location": "command_line_usage/#search-for-recreation-areas-by-query-string", "title": "Search for Recreation Areas by Query String", "text": "<p>Just need to find what your local Recreation Area ID number is? This simple command allows you to search and list recreation areas. It accepts <code>--search</code> and <code>--state</code> arguments.</p> <pre><code>camply recreation-areas --search \"Yosemite National Park\"\n</code></pre>"}, {"location": "command_line_usage/#look-for-specific-campgrounds-within-a-recreation-area", "title": "Look for Specific Campgrounds Within a Recreation Area", "text": "<p>Need to get even more specific and search for a particular campground? This search lists campgrounds attached to a recreation area id <code>--rec-area</code>. It also accepts <code>--search</code> and <code>--state</code> arguments.</p> <pre><code>camply campgrounds --rec-area 2991\n</code></pre>"}, {"location": "command_line_usage/#look-for-specific-campgrounds-by-query-string", "title": "Look for Specific Campgrounds by Query String", "text": "<p>The below search looks for Fire Lookout Towers to stay in inside of California.</p> <pre><code>camply campgrounds --search \"Fire Tower Lookout\" --state CA\n</code></pre>"}, {"location": "command_line_usage/#searching-for-tickets-and-timed-entries", "title": "Searching for Tickets and Timed Entries", "text": "<p>The Recreation.gov Tickets, Tours, &amp; Timed-Entry Providers support \"campgrounds\" that are actually resources like timed entry appointments and tickets to recreation activities.</p>"}, {"location": "command_line_usage/#tickets-tours", "title": "Tickets + Tours", "text": "<p>Let's say you're going on vacation in Hawaii and you're interested in what hiking tickets are available:</p> <pre><code>camply campgrounds \\\n    --provider RecreationDotGovTicket \\\n    --state HI\n</code></pre> <p>Nice, there are some great options there. Let's say we've decided on the Haleakala National Park Summit Sunrise Reservations. This \"campground\" has ID #253731. These reservations are hard to snag but they do pop up!</p> <pre><code>camply campsites \\\n  --provider RecreationDotGovTicket \\\n  --start-date 2023-06-09 \\\n  --end-date 2023-06-10 \\\n  --campground 253731 \\\n  --search-forever \\\n  --notifications email\n</code></pre>"}, {"location": "command_line_usage/#timed-entry", "title": "Timed Entry", "text": "<p>Let's say you're visiting Oregon and wanting to visit the Lava River Cave. They've recently implemented a Timed Reservation System - so we'd use the <code>RecreationDotGovTimedEntry</code> provider:</p> <pre><code>camply campgrounds \\\n    --provider RecreationDotGovTimedEntry \\\n    --state OR\n</code></pre> <p>Using the above command we can see that the campground ID we want is #10089508:</p> <pre><code>camply campsites \\\n  --provider RecreationDotGovTimedEntry \\\n  --start-date 2023-06-09 \\\n  --end-date 2023-06-10 \\\n  --campground 10089508 \\\n  --search-forever \\\n  --notifications email\n</code></pre>"}, {"location": "command_line_usage/#using-the-daily-providers", "title": "Using the Daily Providers", "text": "<p>You'll also notice that there are alternative daily providers for our tours and timed entry providers: <code>RecreationDotGovTicket</code> -&gt; <code>RecreationDotGovDailyTicket</code> and <code>RecreationDotGovTimedEntry</code> -&gt; <code>RecreationDotGovDailyTimedEntry</code>. These providers search the same recreation activities as their non-daily counterparts but there are scenarios where you might want to use the daily provider.</p> <p>When you use the daily provider it issues an API request for each day in your search range, instead of once per month with the non-daily providers. This means that you can make as many as 31x more API requests compared to the non-daily counterpart. <code>camply</code> needs to be respectful of recreation.gov so always use the non-daily version when you have a large search window.</p> <p>It's suspected that the non-daily providers return \"cached\" results and can take longer to reflect actual inventory. When you have a small search window, or if you need to use the <code>--equipment</code> filtering functionality, then you should use the daily provider.</p> <p>In the following scenario we'll search for tickets to a great attraction, the Keys Ranch Tour, in Joshua Tree National Park.</p> <p>Here's how you could search for that and retrieve its campground ID, #300004:</p> <pre><code>camply campgrounds \\\n    --provider RecreationDotGovDailyTicket \\\n    --search \"Keys Ranch Tour\"\n</code></pre> <p>Great, now let's search:</p> <pre><code>camply campsites \\\n  --provider RecreationDotGovDailyTicket \\\n  --start-date 2023-07-06 \\\n  --end-date 2023-07-07 \\\n  --campground 300004\n</code></pre> <p>Let's take it even a step further, let's say you need 4 spots in their 1:00PM time slot. In this case we can search for that timeslot using the <code>--equipment</code> option and providing the time and minimum spots needed (<code>1300</code> and <code>4</code>):</p> <pre><code>camply campsites \\\n  --provider RecreationDotGovDailyTicket \\\n  --start-date 2023-07-06 \\\n  --end-date 2023-07-07 \\\n  --campground 300004 \\\n  --equipment 1300 4\n</code></pre> <p>Here's another example of searching for a specific time, this time for the timed-entry Tuweep Area Day Use Passes in Grand Canyon National Park (ID #10089462). In this example we're looking for any number of spots in their 8:00AM-5:00PM time slot:</p> <pre><code>camply campsites \\\n  --provider RecreationDotGovDailyTimedEntry \\\n  --start-date 2023-07-06 \\\n  --end-date 2023-07-07 \\\n  --campground 10089462 \\\n  --equipment 0800 0\n</code></pre>"}, {"location": "command_line_usage/#search-reservecalifornia", "title": "Search ReserveCalifornia", "text": "<p>ReserveCalifornia is the online booking provider for California State Parks and it works a lot like <code>RecreationDotGov</code>.</p> <p>Note</p> <p>ReserveCalifornia is one of many providers that use the UseDirect API. The following providers are also supported:</p> <ul> <li><code>AlabamaStateParks</code>: Searches on ReserveAlaPark.com for Campsites</li> <li><code>ArizonaStateParks</code>: Searches on AZStateParks.com for Campsites</li> <li><code>FloridaStateParks</code>: Searches on FloridaStateParks.org for Campsites</li> <li><code>MinnesotaStateParks</code>: Searches on ReserveMN.usedirect.com for Campsites</li> <li><code>MissouriStateParks</code>: Searches on icampmo1.usedirect.com for Campsites</li> <li><code>OhioStateParks</code>: Searches on ReserveOhio.com for Campsites</li> <li><code>VirginiaStateParks</code>: Searches on ReserveVAParks.com for Campsites</li> <li><code>NorthernTerritory</code>: Searches the Australian Northern Territory for Campsites</li> <li><code>FairfaxCountyParks</code>: Searches on fairfax.usedirect.com for Campsites (Virginia)</li> <li><code>MaricopaCountyParks</code>: Searches on MaricopaCountyParks.org for Campsites (Arizona)</li> <li><code>OregonMetro</code>: Searches on OregonMetro.gov for Campsites (Portland Metro)</li> </ul> <p>If you wanted to look for recreation areas (groupings of campgrounds):</p> <pre><code>camply recreation-areas --provider ReserveCalifornia --search \"Los Angeles\"\n</code></pre> <p>If you want to look for more specific campgrounds to search:</p> <pre><code>camply campgrounds --provider ReserveCalifornia --search \"Sonoma Coast\"\n</code></pre> <p>And finally, searching for a campsite is very similar to RecreationDotGov:</p> <pre><code>camply campsites \\\n    --provider ReserveCalifornia \\\n    --start-date 2023-07-01 \\\n    --end-date 2023-08-01 \\\n    --rec-area 718 \\\n    --weekends\n</code></pre> <p>Note</p> <p><code>ReserveCalifornia</code> doesn't yet support searching / filtering by equipment.</p>"}, {"location": "command_line_usage/#run-camply-as-a-cron-job", "title": "Run camply as a CRON Job", "text": "<p>In some instances you don't want to run camply as a continuous, blocking Python process. Instead you might want to run camply as a CRON job that checks for a campsite every 30 minutes (<code>*/30 * * * *</code>). In this case you would use the <code>--search-once</code> option which enables continuous searching functionality (like sending notifications) without actually searching continuously.</p> <p>Make sure to save your search results offline if running camply as a CRON job, this allows camply to save any campsites it finds between searches so that it only sends you a notification once:</p> <pre><code>camply campsites \\\n    --rec-area 2725 \\\n    --start-date 2023-07-10 \\\n    --end-date 2023-07-18 \\\n    --notifications email \\\n    --search-once \\\n    --offline-search\n</code></pre>"}, {"location": "contributing/", "title": "Contributing", "text": ""}, {"location": "contributing/#quickstart", "title": "Quickstart", "text": "<pre><code>pipx install pre-commit\npipx install hatch\npre-commit install\nhatch env create\nhatch shell\n</code></pre>"}, {"location": "contributing/#tools", "title": "Tools", "text": "<p>This project makes use of a couple tools to streamline the development process: pre-commit and hatch.</p>"}, {"location": "contributing/#pre-commit", "title": "pre-commit", "text": "<p>pre-commit is a tool to manage git-hooks scripts, which are useful for identifying simple issues before submission to code review.</p> <pre><code>pipx install pre-commit\npre-commit install\n</code></pre> <p>To use pre-commit, you must first install it. pipx is preferred, but you can also install with <code>pip</code>. Once pre-commit is installed, run <code>pre-commit install</code> to install the git-hooks scripts into the local repository. Done, now pre-commit will run automatically on git commit. To run it manually on your changed files run <code>pre-commit run</code> on your command line.</p>"}, {"location": "contributing/#hatch", "title": "hatch", "text": "<p>hatch is a tool to manage the packaging and distribution of Python packages. It also used to manage the virtual environment for the project and running common scripts.</p> <pre><code>pipx install hatch\nhatch env create\nhatch run test\n</code></pre>"}, {"location": "contributing/#commit-message-format", "title": "Commit Message Format", "text": "<p>Releases for this project are handled entirely by CI/CD via Pull requests being merged into the <code>main</code> branch. Contributions follow the gitmoji standards with conventional commits, orchestration is handled by the semantic-release tool.</p> <p>While you can denote other changes on your commit messages with gitmoji, the following commit message emoji prefixes are the only ones to trigger new releases:</p> Emoji Shortcode Description Semver \ud83d\udca5 :boom: Introduce breaking changes. Major \u2728 :sparkles: Introduce new features. Minor \ud83d\udc1b :bug: Fix a bug. Patch \ud83d\ude91 :ambulance: Critical hotfix. Patch \ud83d\udd12 :lock: Fix security issues. Patch <p>Most features can be squash merged into a single commit. If you're working on a feature, your commit message might look like:</p> <pre><code>\u2728 New Feature Description\n</code></pre> <p>Bug fix commits would look like this:</p> <pre><code>\ud83d\udc1b Bug Fix Description\n</code></pre>"}, {"location": "contributing/#scripts", "title": "Scripts", "text": "<p>All common scripts for this repository are managed by hatch.</p> <pre><code>hatch run &lt;script&gt;\n</code></pre> Script Script Description <code>format</code> Code Formatting black and ruff <code>lint</code> Code Linting black and ruff <code>check</code> Type Checking with mypy <code>test</code> Unit Testing with pytest <code>all</code> Run multiple scripts: <code>format</code>, <code>lint</code>, <code>check</code>, <code>test</code> <code>docs-serve</code> Documentation Serving MkDocs and mkdocs-material <code>requirements</code> Lock File Updates with pip-tools <p>Note</p> <p>While the camply codebase is undergoing some refactoring, the <code>check</code> script is not required. Once the codebase is fully typed, the <code>check</code> script will be required to pass before a Pull Request can be merged. In the meantime, please use type annotations on any new changes.</p>"}, {"location": "contributing/#dependencies", "title": "Dependencies", "text": "<p>Dependencies are managed by pip-tools / pip-compile. After updating dependencies in the <code>pyproject.toml</code> file, run the following to update the underlying <code>requirements.txt</code> files:</p> <pre><code>hatch run requirements\n</code></pre>"}, {"location": "dependencies/", "title": "Dependencies", "text": "<p><code>camply</code> is compatible with any Python version &gt;= <code>3.8</code>. Here are the current dependencies:</p> <ul> <li>click<ul> <li>The <code>click</code> package is used to leverage it's simple Command Line Interface     API for camply</li> </ul> </li> <li>requests<ul> <li>The <code>requests</code> package is used to fetch data from the APIs of Camping Booking Providers.</li> </ul> </li> <li>pandas<ul> <li>The <code>pandas</code> package is to group and aggregate across large data sets of campsites,     campgrounds, and recreation areas.</li> </ul> </li> <li>tenacity<ul> <li>The <code>tenacity</code> package is used for retrying data searches on the underlying campsite APIs.     This retrying methodology handles exceptions allowing for API downtime and facilitating     exponential backoff.</li> </ul> </li> <li>rich<ul> <li>Colorizing the CLI (also using rich-click to     colorize <code>click</code>)</li> </ul> </li> <li>python-dotenv<ul> <li>The <code>python-dotenv</code> package reads key-value pairs from a <code>.env</code> file and can set them as     environment variables - this helps with the <code>.camply</code> configuration file.</li> </ul> </li> <li>pydantic<ul> <li>The <code>pydantic</code> package performs data validation against API responses and assists with fancy     data containers for <code>camply</code> objects.</li> </ul> </li> <li>PyYAML<ul> <li>PyYAML is a YAML parsing library - this helps with the YAML file campsite searches.</li> </ul> </li> <li>ratelimit<ul> <li>The <code>ratelimit</code> package is used for limiting the frequency of our API calls to external     APIs so we can be good partners to our friends who run the campsite booking services.</li> </ul> </li> <li>fake-useragent<ul> <li><code>fake-useragent</code> makes it easy for us to mock the latest browsers when interacting with     certain API providers.</li> </ul> </li> </ul>"}, {"location": "how_to_run/", "title": "How to Run Camply", "text": ""}, {"location": "how_to_run/#run-modes", "title": "Run Modes", "text": ""}, {"location": "how_to_run/#non-continuous", "title": "non-continuous", "text": "<p>camply's default run-mode is \"non-continuous\". This means that camply runs a search with your custom campsite query once. Once this search is complete camply will exit whether it found any matching campsites or not. **example</p>"}, {"location": "how_to_run/#continuous", "title": "continuous", "text": "<p>Second, camply has a \"continuous\" mode. Differently from the \"non-continuous\" mode, camply will continue to search until it finds at least one matching campsite. camply sleeps in between searches so we don't overload our friends who run the camping APIs. **example</p> <p>Note</p> <p>This mode is enabled when any of the following options are provided: <code>--continuous</code>, <code>--notifications</code>, <code>--search-forever</code>, <code>--polling-interval</code>, <code>--notify-first-try</code>.</p> <p>Important</p> <p>When you run camply in \"continuous\" or \"search-forever\" mode it needs to run as a continuous Python process in your terminal. This means that you need an always-on computer to run your search.</p> <p>A small computing device like a Raspberry Pi is perfect for something like this. If you're looking to achieve this with a device like a laptop, make sure you've prevented the computer from sleeping.</p>"}, {"location": "how_to_run/#search-forever", "title": "search-forever", "text": "<p>Third, camply has its \"search-forever\" mode. This is slightly different from the \"continuous\" mode because it will continue to run even after it's found its first matching campsite. camply remembers which campsites it's found before and won't notify you for the same campsite twice. **example</p> <p>Note</p> <p>This mode is enabled with the <code>--search-forever</code> option.</p>"}, {"location": "how_to_run/#search-once", "title": "search-once", "text": "<p>Lastly, camply has its \"search-once\" mode. This enables some features of continuous searching, like the ability to send notifications, but without actually running continuously. This is useful if you're interested in running camply as a CRON job instead of as a blocking python process. **example</p> <p>Note</p> <p>This mode is enabled with the <code>--search-once</code> option.</p>"}, {"location": "how_to_run/#running-in-docker", "title": "Running in Docker", "text": "<p>Docker is a great solution to run camply wherever you are. There is an official docker image published alongside camply's PyPI distribution that makes running camply in the background as a detached container really easy.</p> <pre><code>docker pull juftin/camply\n</code></pre> <p>Here's an example of a detached container searching in the background (notice the <code>-d</code> flag, the container will run detached).</p> <pre><code>docker run --rm -d \\\n  --name camply-detached-example \\\n  --env PUSHOVER_PUSH_TOKEN=${PUSHOVER_PUSH_TOKEN} \\\n  --env PUSHOVER_PUSH_USER=${PUSHOVER_PUSH_USER} \\\n  --env TZ=\"America/Denver\" \\\n  juftin/camply \\\n  camply campsites \\\n      --rec-area 2991 \\\n      --start-date 2023-08-01 \\\n      --end-date 2023-09-01 \\\n      --search-forever \\\n      --notifications pushover\n</code></pre> <p>See the Environment Variables section for a list of environment variables camply uses. Alternatively, if you have already run <code>camply configure</code> locally, you can share your <code>.camply</code> file inside the docker container.</p> <pre><code>docker run --rm \\\n  --name camply-file-share-example \\\n  --env TZ=\"America/Denver\" \\\n  --volume ${HOME}/.camply:/home/camply/.camply \\\n  juftin/camply \\\n  camply campsites \\\n      --provider yellowstone \\\n      --start-date 2023-07-22 \\\n      --end-date 2023-07-27 \\\n      --search-forever \\\n      --notifications email\n</code></pre> <p>To manage multiple searches (with different notification preferences) I like to use YAML configuration files:</p> <pre><code>docker run --rm -d \\\n  --name camply-email-example \\\n  --env TZ=\"America/Denver\" \\\n  --env EMAIL_TO_ADDRESS=${EMAIL_TO_ADDRESS} \\\n  --env EMAIL_USERNAME=${EMAIL_USERNAME} \\\n  --env EMAIL_PASSWORD=${EMAIL_PASSWORD} \\\n  --volume example_search.yaml:/home/camply/example_search.yaml \\\n  juftin/camply:latest \\\n  camply campsites \\\n      --yaml-config /home/camply/example_search.yaml\n</code></pre> <p>A docker-compose example of the above YAML Config is also available.</p>"}, {"location": "how_to_run/#environment-variables", "title": "Environment Variables", "text": "<ul> <li>Pushover Notifications<ul> <li><code>PUSHOVER_PUSH_USER</code></li> </ul> </li> <li>Apprise Notifications<ul> <li><code>APPRISE_URL</code></li> </ul> </li> <li>Email Notifications<ul> <li><code>EMAIL_TO_ADDRESS</code></li> <li><code>EMAIL_USERNAME</code></li> <li><code>EMAIL_PASSWORD</code></li> <li><code>EMAIL_FROM_ADDRESS</code> (defaults to \"camply@juftin.com\")</li> <li><code>EMAIL_SUBJECT_LINE</code> (defaults to \"camply Notification\")</li> <li><code>EMAIL_SMTP_SERVER</code> (defaults to \"smtp.gmail.com\")</li> <li><code>EMAIL_SMTP_PORT</code> (defaults to 465)</li> </ul> </li> <li>Ntfy Notifications<ul> <li><code>NTFY_TOPIC</code></li> </ul> </li> <li>Pushbullet Notifications<ul> <li><code>PUSHBULLET_API_TOKEN</code></li> </ul> </li> <li>Twilio Notifications<ul> <li><code>TWILIO_ACCOUNT_SID</code></li> <li><code>TWILIO_AUTH_TOKEN</code></li> <li><code>TWILIO_SOURCE_NUMBER</code></li> <li><code>TWILIO_DEST_NUMBERS</code></li> </ul> </li> <li>Slack Notifications<ul> <li><code>SLACK_WEBHOOK</code></li> </ul> </li> <li>Telegram Notifications<ul> <li><code>TELEGRAM_BOT_TOKEN</code></li> <li><code>TELEGRAM_CHAT_ID</code></li> </ul> </li> <li>Optional Environment Variables<ul> <li><code>LOG_LEVEL</code> (sets logging level, defaults to \"INFO\")</li> <li><code>PUSHOVER_PUSH_TOKEN</code> (Personal Pushover App Token)</li> <li><code>RIDB_API_KEY</code> (Personal API Key     for Recreation.gov API)</li> <li><code>TZ</code> (TZ Database Name for     logging, defaults to UTC)</li> </ul> </li> </ul>"}, {"location": "installation/", "title": "Installation", "text": ""}, {"location": "installation/#python", "title": "Python", "text": "<pre><code>pipx install camply\n</code></pre> <p>Note</p> <p>If you're using camply on your command line - it's recommended that you use a tool like pipx to easily manage the application in an isolated virtual environment. However you can always <code>pip install camply</code> as well.</p> <p>PyPI Link</p>"}, {"location": "installation/#docker", "title": "Docker", "text": "<pre><code>docker pull juftin/camply\n</code></pre> <p>Docker Hub Link</p> <p>**see Running in Docker.</p>"}, {"location": "providers/", "title": "Providers", "text": "<p>camply works with a number of providers. A \"provider\" is an Online Booking Service that lists camping and recreation inventory.</p> <p>Info</p> <p>Rather than specifiying provider with the <code>--provider</code> option on the command line you can also set the <code>CAMPLY_PROVIDER</code> environnment variable.</p>"}, {"location": "providers/#recreationgov", "title": "Recreation.gov", "text": "<p>Recreation.gov is (so far) the largest and most widely supported provider. This provider spans over thousands of campgrounds across the USA including most of our National parks.</p> <p>You can find the best documentation for searching for campsites over at the main documentation page: Command Line Usage</p> <pre><code>camply campgrounds --provider RecreationDotGov --state CA --search \"Fire Towers\"\n</code></pre>"}, {"location": "providers/#yellowstone", "title": "Yellowstone", "text": "<p>Yellowstone is one of the few National Parks that uses a Campsite Booking provider other than Recreation.gov. A number of the campgrounds in Yellowstone can be booked through YellowstoneNationalParkLodges.com. Read more about using camply to search this provider on the documentation.</p> <pre><code>camply --provider Yellowstone campgrounds\n</code></pre> <p>The Yellowstone Provider currently supports the following Campgrounds:</p> <ul> <li>Bridge Bay Campground (YLYB:RV)</li> <li>Canyon Campground (YLYC:RV)</li> <li>Fishing Bridge RV Park (YLYF:RV)</li> <li>Grant Campground (YLYG:RV)</li> <li>Madison Campground (YLYM:RV)</li> </ul>"}, {"location": "providers/#goingtocamp", "title": "GoingToCamp", "text": "<p>GoingToCamp provides campground listing and booking services for several US state and Canadian provincial parks.</p> <p>To get a listing of GoingToCamp recreation areas, and their IDs, run the following command:</p> <pre><code>camply --provider goingtocamp recreation-areas\n</code></pre> <p>Unlike other camply providers, when using GoingToCamp you must restrict campground and campsites searches to a single recreation area. Since recreation areas may list every campground in a state or provincial park system, it feels natural to filter searches by recreation area when using GoingToCamp.</p> <p>Currently, the following recreation areas are supported:</p> <ul> <li>Parks Canada - Canada National Parks - reservation.pc.gc.ca</li> <li>Washington State Parks - Washington, USA - washington.goingtocamp.com</li> <li>Wisconsin State Parks - Wisconsin, USA - wisconsin.goingtocamp.com</li> <li>Michigan State Parks - Michigan, USA - midnrreservations.com</li> <li>BC Parks - British Columbia, CA - camping.bcparks.ca</li> <li>Maryland State Parks - Maryland, USA - parkreservations.maryland.gov</li> <li>Nova Scotia Parks - Nova Scotia, CA - novascotia.goingtocamp.com</li> <li>Manitoba Parks - Manitoba, CA - manitoba.goingtocamp.com</li> <li>New Brunswick Provincial Parks - New Brunswick, CA - parcsnbparks.info</li> <li>Newfoundland &amp; Labrador Provincial Parks - Newfoundland and Labrador, CA - nlcamping.ca</li> <li>Long Point Region - Ontario, CA - longpoint.goingtocamp.com</li> <li>Algonquin Highlands - Ontario, CA - ahtrails.ca</li> <li>Maitland Valley, Ontario, CA - maitlandvalley.goingtocamp.com</li> <li>Saugeen Valley - Ontario, CA - saugeen.goingtocamp.com</li> <li>St. Clair Region - Ontario, CA - stclair.goingtocamp.com</li> <li>Tacoma Power Parks, Washington, USA - tacomapower.goingtocamp.com</li> <li>Gatineau Park - Ontario-Quebec, CA - reservations.ncc-ccn.gc.ca</li> </ul> <p>Check out the following documentation examples for more details on searching GoingToCamp recreation areas:</p> <ul> <li>Look for a Campsite from GoingToCamp</li> <li>Searching GoingToCamp Using Equipment</li> </ul>"}, {"location": "providers/#recreationgov-tickets-tours-timed-entry", "title": "Recreation.gov Tickets, Tours, &amp; Timed-Entry", "text": "<p>Apart from reservations for campsites, Recreation.gov also supports reserving tickets &amp; tours there are thousands of tickets and tours options available around the USA.</p> <p>Search for Tickets, Tours, &amp; Timed-Entry Online</p>"}, {"location": "providers/#tours-tickets", "title": "Tours &amp; Tickets", "text": "<pre><code>camply campgrounds --provider RecreationDotGovTicket --state HI\n</code></pre>"}, {"location": "providers/#timed-entry", "title": "Timed Entry", "text": "<pre><code>camply campgrounds --provider RecreationDotGovTimedEntry --state OR\n</code></pre> <ul> <li>Searching for Tickets and Timed Entries<ul> <li>Tickets + Tours</li> <li>Timed Entry</li> <li>Using the Daily Providers</li> </ul> </li> </ul>"}, {"location": "providers/#state-parks", "title": "State Parks", "text": ""}, {"location": "providers/#reservecalifornia", "title": "ReserveCalifornia", "text": "<p>ReserveCalifornia is the Online Booking provider for California State Parks. With 279 park units, over 340 miles of coastline, 970 miles of lake and river frontage, 15,000 campsites, 5,200 miles of trails, the California Department of Parks and Recreation (State Parks) contains the largest and most diverse recreational holdings of any state agency in the nation.</p> <pre><code>camply recreation-areas --provider ReserveCalifornia --search \"Los Angeles\"\n</code></pre> <pre><code>camply campgrounds --provider ReserveCalifornia --search \"Sonoma Coast\"\n</code></pre> <pre><code>camply campsites \\\n    --provider ReserveCalifornia \\\n    --start-date 2023-07-01 \\\n    --end-date 2023-08-01 \\\n    --rec-area 718 \\\n    --weekends\n</code></pre> <ul> <li>Search ReserveCalifornia</li> </ul>"}, {"location": "providers/#other-usedirect-providers", "title": "Other UseDirect Providers", "text": "<p>ReserveCalifornia is one of many providers that use the UseDirect API. The following providers are also supported:</p> <ul> <li><code>AlabamaStateParks</code>: Searches on ReserveAlaPark.com for Campsites</li> <li><code>ArizonaStateParks</code>: Searches on AZStateParks.com for Campsites</li> <li><code>FloridaStateParks</code>: Searches on FloridaStateParks.org for Campsites</li> <li><code>MinnesotaStateParks</code>: Searches on ReserveMN.usedirect.com for Campsites</li> <li><code>MissouriStateParks</code>: Searches on icampmo1.usedirect.com for Campsites</li> <li><code>OhioStateParks</code>: Searches on ReserveOhio.com for Campsites</li> <li><code>VirginiaStateParks</code>: Searches on ReserveVAParks.com for Campsites</li> <li><code>NorthernTerritory</code>: Searches the Australian Northern Territory for Campsites</li> <li><code>FairfaxCountyParks</code>: Searches on fairfax.usedirect.com for Campsites (Virginia)</li> <li><code>MaricopaCountyParks</code>: Searches on MaricopaCountyParks.org for Campsites (Arizona)</li> <li><code>OregonMetro</code>: Searches on OregonMetro.gov for Campsites (Portland Metro)</li> </ul>"}, {"location": "python/", "title": "Object-Oriented Usage (Python)", "text": ""}, {"location": "python/#search-for-a-recreationgov-campsite", "title": "Search for a Recreation.gov Campsite", "text": "<pre><code>from datetime import datetime\nimport logging\nfrom typing import List\nfrom camply.containers import AvailableCampsite, SearchWindow\nfrom camply.search import SearchRecreationDotGov\nlogging.basicConfig(format=\"%(asctime)s [%(levelname)8s]: %(message)s\",\nlevel=logging.INFO)\nmonth_of_june = SearchWindow(start_date=datetime(year=2022, month=6, day=1),\nend_date=datetime(year=2022, month=6, day=30))\ncamping_finder = SearchRecreationDotGov(search_window=month_of_june,\nrecreation_area=2725,  # Glacier Ntl Park\nweekends_only=False,\nnights=1)\nmatches: List[AvailableCampsite] = camping_finder.get_matching_campsites(log=True, verbose=True,\ncontinuous=False)\n</code></pre> <p>The above script returns a list of any matching <code>AvailableCampsite</code> pydantic objects:</p> <pre><code>[\nAvailableCampsite(campsite_id=\"5391\",\nbooking_date=datetime.datetime(2022, 6, 13, 0, 0),\ncampsite_site_name=\"B37\",\ncampsite_loop_name=\"Loop B\",\ncampsite_type=\"STANDARD NONELECTRIC\",\ncampsite_occupancy=(0, 8),\ncampsite_use_type=\"Overnight\",\navailability_status=\"Available\",\nrecreation_area=\"Glacier National Park, MT\",\nrecreation_area_id=\"2725\",\nfacility_name=\"Fish Creek Campground\",\nfacility_id=\"232493\",\nbooking_url=\"https://www.recreation.gov/camping/campsites/5391\")\n]\n</code></pre>"}, {"location": "python/#continuously-search-for-recreationgov-campsites", "title": "Continuously Search for Recreation.gov Campsites", "text": "<p>You'll notice that the <code>get_matching_campsites</code> function takes accepts parameter values very similar to the commandline arguments.</p> <pre><code>from datetime import datetime\nimport logging\nfrom camply.containers import SearchWindow\nfrom camply.search import SearchRecreationDotGov\nlogging.basicConfig(format=\"%(asctime)s [%(levelname)8s]: %(message)s\",\nlevel=logging.INFO)\nmonth_of_june = SearchWindow(start_date=datetime(year=2022, month=6, day=1),\nend_date=datetime(year=2022, month=6, day=30))\ncamping_finder = SearchRecreationDotGov(search_window=month_of_june,\nrecreation_area=[2991, 1074],  # Multiple Rec Areas\nweekends_only=False,\nnights=3)\ncamping_finder.get_matching_campsites(log=True, verbose=True,\ncontinuous=True,\npolling_interval=5,\nnotification_provider=\"pushover\",\nsearch_forever=True,\nnotify_first_try=False)\n</code></pre>"}, {"location": "recreationdotgov/", "title": "Finding Recreation Areas IDs and Campground IDs To Search Without Using the Command Line", "text": "<p>You can uncover campground and recreation area IDs just by using the https://recreation.gov search functionality. Use the below example for a campground within Glacier National Park.</p> <p>First, perform your search on https://recreation.gov.</p> <p>The above search will take you to a URL like this: https://www.recreation.gov/search?q=Glacier%20National%20Park&amp;entity_id=2725&amp;entity_type=recarea. Taking a closer look at the URL components you can see that Glacier National Park has the Recreation Area ID #2725.</p> <p>Searching deeper into campgrounds inside of Glacier National Park you might find Fish Creek Campground at a URL like https://www.recreation.gov/camping/campgrounds/232493. Here, we can see that this campground has a Campground ID of #232493.</p>"}]}